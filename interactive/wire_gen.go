// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/huangyul/go-blog/interactive/events"
	"github.com/huangyul/go-blog/interactive/grpc"
	"github.com/huangyul/go-blog/interactive/ioc"
	"github.com/huangyul/go-blog/interactive/repository"
	"github.com/huangyul/go-blog/interactive/repository/cache"
	"github.com/huangyul/go-blog/interactive/repository/dao"
	"github.com/huangyul/go-blog/interactive/service"
)

// Injectors from wire.go:

func InitApp() *App {
	cmdable := ioc.InitRedis()
	interactiveCache := cache.NewInteractiveCache(cmdable)
	db := ioc.InitDB()
	interactiveDao := dao.NewInteractiveDao(db)
	interactiveRepository := repository.NewInteractiveRepository(interactiveCache, interactiveDao)
	client := ioc.InitSaramaClient()
	interactiveReadEventConsumer := events.NewInteractiveReadEventConsumer(interactiveRepository, client)
	v := ioc.InitConsumers(interactiveReadEventConsumer)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	interactiveServiceServer := grpc.NewInteractiveServiceServer(interactiveService)
	server := ioc.InitGrpc(interactiveServiceServer)
	app := &App{
		consumers: v,
		server:    server,
	}
	return app
}

// wire.go:

var interactiveWireSet = wire.NewSet(dao.NewInteractiveDao, cache.NewInteractiveCache, repository.NewInteractiveRepository, service.NewInteractiveService)
